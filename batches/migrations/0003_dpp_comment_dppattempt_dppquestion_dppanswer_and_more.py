# Generated by Django 5.2.4 on 2025-07-30 07:31

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('batches', '0002_alter_order_order_id'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DPP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('time_limit_minutes', models.PositiveIntegerField(default=60)),
                ('total_marks', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('lecture', 'Lecture'), ('solution', 'DPP Solution')], max_length=20)),
                ('object_id', models.PositiveIntegerField()),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('dislikes', models.ManyToManyField(blank=True, related_name='disliked_comments', to=settings.AUTH_USER_MODEL)),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='batches.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DPPAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveIntegerField(default=0)),
                ('total_marks', models.PositiveIntegerField(default=0)),
                ('percentage', models.FloatField(default=0.0)),
                ('time_taken_minutes', models.PositiveIntegerField(default=0)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('dpp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='batches.dpp')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dpp_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='DPPQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('mcq', 'Multiple Choice'), ('numerical', 'Numerical'), ('true_false', 'True/False')], default='mcq', max_length=20)),
                ('option_a', models.CharField(blank=True, max_length=500)),
                ('option_b', models.CharField(blank=True, max_length=500)),
                ('option_c', models.CharField(blank=True, max_length=500)),
                ('option_d', models.CharField(blank=True, max_length=500)),
                ('correct_answer', models.CharField(max_length=100)),
                ('explanation', models.TextField(blank=True)),
                ('marks', models.PositiveIntegerField(default=1)),
                ('order_index', models.PositiveIntegerField(default=0)),
                ('dpp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='batches.dpp')),
            ],
            options={
                'ordering': ['order_index'],
            },
        ),
        migrations.CreateModel(
            name='DPPAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_answer', models.CharField(blank=True, max_length=100)),
                ('is_correct', models.BooleanField(default=False)),
                ('marks_obtained', models.PositiveIntegerField(default=0)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='batches.dppattempt')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='batches.dppquestion')),
            ],
            options={
                'unique_together': {('attempt', 'question')},
            },
        ),
        migrations.CreateModel(
            name='DPPSolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solution_pdf', models.FileField(blank=True, null=True, upload_to='dpp/solutions/pdfs/')),
                ('video_type', models.CharField(choices=[('youtube', 'YouTube'), ('vimeo', 'Vimeo'), ('drive', 'Google Drive'), ('upload', 'Upload'), ('url', 'Direct URL')], default='youtube', max_length=20)),
                ('video_url', models.URLField(blank=True)),
                ('video_file', models.FileField(blank=True, null=True, upload_to='dpp/solutions/videos/')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('dpp', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='solution', to='batches.dpp')),
            ],
        ),
        migrations.CreateModel(
            name='Lecture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_number', models.PositiveIntegerField()),
                ('topic_name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True)),
                ('video_type', models.CharField(choices=[('youtube', 'YouTube'), ('vimeo', 'Vimeo'), ('drive', 'Google Drive'), ('upload', 'Upload'), ('url', 'Direct URL')], default='youtube', max_length=20)),
                ('video_url', models.URLField(blank=True, help_text='YouTube/Vimeo/Drive URL or direct video URL')),
                ('video_file', models.FileField(blank=True, null=True, upload_to='lectures/videos/')),
                ('lecture_pdf', models.FileField(blank=True, null=True, upload_to='lectures/pdfs/')),
                ('duration_minutes', models.PositiveIntegerField(default=0, help_text='Duration in minutes')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lectures', to='batches.batchsubject')),
            ],
            options={
                'ordering': ['day_number'],
                'unique_together': {('subject', 'day_number')},
            },
        ),
        migrations.AddField(
            model_name='dpp',
            name='lecture',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dpp', to='batches.lecture'),
        ),
        migrations.DeleteModel(
            name='BatchChapter',
        ),
    ]
